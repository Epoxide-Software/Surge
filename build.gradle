buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

apply plugin: "maven"

apply plugin: 'net.minecraftforge.gradle.forge'

group = "org.epoxide.surge"
archivesBaseName = "Surge"
version = getVersionFromJava(file("src/main/java/org/epoxide/surge/libs/Constants.java"))

sourceCompatibility = 1.8
targetCompatibility = 1.8

//Defines the MC environment information.
minecraft {
    version = "1.11.2-13.20.0.2260"
    runDir = "run"
    mappings = "snapshot_20161220"
    useDepAts = true
}

//Handles basic resources such as mcmod.info
processResources {

    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {

        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {

        exclude 'mcmod.info'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {

    manifest {

        attributes 'FMLAT': 'surge_at.cfg', "FMLCorePlugin": "org.epoxide.surge.asm.SurgeLoadingPlugin", "FMLCorePluginContainsFMLMod": "true"
    }
}

//Pulls the build version from a Java file.
String getVersionFromJava(File file) {

    String release = "0";
    String update = "0";
    String patch = "0";

    String build = System.getenv("BUILD_NUMBER") ? System.getenv("BUILD_NUMBER") : "0";
    def outfile = "";
    def ln = System.getProperty("line.separator")

    String prefix = "public static final String VERSION = \"";
    file.eachLine {
        String s ->

            String v = s.trim();

            if (v.startsWith(prefix)) {

                v = v.substring(prefix.length(), v.length() - 2);
                String[] pts = v.split("\\.");

                release = pts[0];
                update = pts[1];
                patch = pts[2];
                s = s.replaceAll(".0\";", ".${build}\";");
            }

            outfile += (s + ln);
    }

    file.write(outfile);

    return "1.10.2-$release.$update.$patch.$build";
}

//Creates the source jar.
task sourcesJar(type: Jar, dependsOn: classes) {

    from sourceSets.main.allSource
    classifier = 'sources'
}

//Creates the JavaDoc jar.
task javadocJar(type: Jar, dependsOn: javadoc) {

    from javadoc.destinationDir
    classifier = 'javadoc'
}

//Creates the deobfuscated jar.
task deobfJar(type: Jar) {

    from sourceSets.main.output
    classifier = "deobf"
}

//Adds the deobf, source and javadoc jars to the build artifacts.
artifacts {

    archives deobfJar
    archives sourcesJar
    archives javadocJar
}

//Uploads the artifacts to the maven server.
uploadArchives {

    repositories {

        mavenDeployer {

            repository(url: "file:///var/www/html/maven")
        }
    }
}

//Prevents incomplete JavaDocs from preventing a build on Java 8.
if (JavaVersion.current().isJava8Compatible()) {

    allprojects {

        tasks.withType(Javadoc) {

            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}
